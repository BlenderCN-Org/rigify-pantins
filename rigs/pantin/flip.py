# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

import bpy
from mathutils import Vector, Matrix
from rna_prop_ui import rna_idprop_ui_prop_get

from rigify.utils import MetarigError
from rigify.utils import new_bone, copy_bone
from rigify.utils import make_deformer_name, make_mechanism_name, strip_org
from rigify.utils import create_bone_widget, create_widget, create_cube_widget
from rigify.utils import connected_children_names, has_connected_children
from rigify.utils import align_bone_z_axis

from . import pantin_utils

from .pantin_template import (UI_IMPORTS, PANTIN_UTILS, PANTIN_REGISTER,
                              REGISTER_PANTIN_PROPS)

script = """
simple = "%s"
if is_selected(simple):
    layout.prop(pose_bones["%s"].constraints["damped_track"], \
'influence', \
text="Dynamics (" + simple + ")", \
slider=True)
"""

class Rig:
    def __init__(self, obj, bone_name, params):
        self.obj = obj
        self.params = params

        eb = self.obj.data.edit_bones

        self.org_bone = bone_name

        if eb[bone_name].parent is not None:
            self.org_parent = eb[bone_name].parent.name
        else:
            self.org_parent = None
        if eb[bone_name].use_connect:
            raise MetarigError(
                "RIGIFY ERROR: Bone %s should not be connected. "
                "Check bone chain for multiple pantin.simple rigs" % (
                    strip_org(self.org_parent)))

    def generate(self):
        eb = self.obj.data.edit_bones

        # Control bones
        ctrl_bone_name = strip_org(self.org_bone)
        ctrl_bone = copy_bone(self.obj, self.org_bone, ctrl_bone_name)

        bpy.ops.object.mode_set(mode='OBJECT')
        pb = self.obj.pose.bones

        # Pose bone settings
        pbone = pb[ctrl_bone]
        pbone.rotation_mode = 'XZY'
        pbone.lock_location = (False, False, True)
        pbone.lock_rotation = (True, True, False)
        pbone.lock_rotation_w = False
        pbone.lock_scale = (False, False, False)

        # Custom properties
        if not "flip" in pbone:
            prop = rna_idprop_ui_prop_get(pbone, "flip", create=True)
            pbone["flip"] = 0
            prop["soft_min"] = 0
            prop["soft_max"] = 1
            prop["min"] = 0
            prop["max"] = 1

        # Widget
        global_scale = pb[ctrl_bone].length
        widget_size = global_scale * 0.3
        pantin_utils.create_aligned_circle_widget(
            self.obj, ctrl_bone, radius=widget_size)

        # Constraint
        con = pb[self.org_bone].constraints.new('COPY_TRANSFORMS')
        con.name = "copy_transforms"
        con.target = self.obj
        con.subtarget = ctrl_bone

        # Driver
        data_path = pb[ctrl_bone].path_from_id("rotation_euler")
        driver = self.obj.driver_add(data_path, 1)
        driver.driver.expression = 'flip * pi'
        var_fs = driver.driver.variables.new()

        var_fs.type = 'SINGLE_PROP'
        var_fs.name = 'flip'
        var_fs.targets[0].id_type = 'OBJECT'
        var_fs.targets[0].id = self.obj
        var_fs.targets[0].data_path = (pb[ctrl_bone].path_from_id()
                                       + '["flip"]')

        ui_script = """
layout.prop(pose_bones["%s"],
            '["flip"]',
            text="Flip",
            )
""" % ctrl_bone

        return {
            'script': [ui_script],
            'imports': UI_IMPORTS,
            'utilities': PANTIN_UTILS,
            'register': PANTIN_REGISTER,
            'register_props': REGISTER_PANTIN_PROPS,
            }


def create_sample(obj):
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('Flip')
    bone.head[:] = 0.0000, 0.0000, 0.0000
    bone.tail[:] = 0.0000, 0.0000, 0.4036
    bone.roll = 3.1416
    bone.use_connect = False
    bones['Flip'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['Flip']]
    pbone.rigify_type = 'pantin.flip'
    pbone.lock_location = (False, False, True)
    pbone.lock_rotation = (True, True, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'XZY'

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        arm.edit_bones.active = bone
